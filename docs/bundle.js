!function(){"use strict";class t extends Error{}function e(t){let e=t.replace(/-/g,"+").replace(/_/g,"/");switch(e.length%4){case 0:break;case 2:e+="==";break;case 3:e+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return function(t){return decodeURIComponent(atob(t).replace(/(.)/g,(t,e)=>{let n=e.charCodeAt(0).toString(16).toUpperCase();return n.length<2&&(n="0"+n),"%"+n}))}(e)}catch(t){return atob(e)}}function n(n,o){if("string"!=typeof n)throw new t("Invalid token specified: must be a string");o||(o={});const r=!0===o.header?0:1,a=n.split(".")[r];if("string"!=typeof a)throw new t(`Invalid token specified: missing part #${r+1}`);let s;try{s=e(a)}catch(e){throw new t(`Invalid token specified: invalid base64 for part #${r+1} (${e.message})`)}try{return JSON.parse(s)}catch(e){throw new t(`Invalid token specified: invalid json for part #${r+1} (${e.message})`)}}t.prototype.name="InvalidTokenError";const o=document.getElementById("jwt-input"),r=document.getElementById("header-json"),a=document.getElementById("payload-json"),s=document.getElementById("error-box");function i(t){return JSON.stringify(t,null,2)}function c(){const t=o.value.trim();if(!t)return r.textContent=a.textContent="",void s.classList.add("d-none");try{const e=n(t,{header:!0}),o=n(t);r.textContent=i(e),a.textContent=i(o),s.classList.add("d-none")}catch(t){r.textContent=a.textContent="",s.textContent="Token non valido: "+t.message,s.classList.remove("d-none")}}o.addEventListener("input",c),c()}();
